@startuml
interface Controller
class PublicController {
    -loginService : LoginService
    -personService : PersonService
    -adminService : AdminService
    +registerUser(RegisterDTO) : ResponseEntity<PersonREST>
    +testAuthorization(UserDetails) : ResponseEntity<PersonREST>
    +map(Double, Double) : ResponseEntity<List<ContainerREST>>
    +mapNeighborhood(Long) : ResponseEntity<List<ContainerREST>>
    +clearance(Long) : ResponseEntity<String>
}
class AdminController {
    -adminService : AdminService
    +listAllContainers() : ResponseEntity<List<ContainerREST>>
    +getContainer(Long) : ResponseEntity<ContainerREST>
    +registerContainer(AddContainerDTO) : ResponseEntity<ContainerREST>
    +updateContainer(AddContainerDTO, Long) : ResponseEntity<ContainerREST>
    +deleteContainer(Long) : ResponseEntity<Boolean>
    +listAllEmployees() : ResponseEntity<List<PersonREST>>
    +getEmployee(Long) : ResponseEntity<PersonREST>
    +registerEmployee(RegisterEmployeeDTO) : ResponseEntity<PersonREST>
    +updateEmployee(RegisterEmployeeDTO, Long) : ResponseEntity<PersonREST>
    +deleteEmployee(Long) : ResponseEntity<Boolean>
    +listAllNeighborhoods() : ResponseEntity<List<NeighborhoodREST>>
    +getNeighborhood(Long) : ResponseEntity<NeighborhoodREST>
    +listAllContainersInNeighborhood(Long) : ResponseEntity<List<ContainerREST>>
    +listAllEmployeesInNeighborhood(Long) : ResponseEntity<List<PersonREST>>
    +registerNeighborhood(AddNeighborhoodDTO) : ResponseEntity<NeighborhoodREST>
    +updateNeighborhood(AddNeighborhoodDTO, Long) : ResponseEntity<NeighborhoodREST>
    +deleteNeighborhood(Long) : ResponseEntity<Boolean>
}
class CitizenController {
    -personService : PersonService
    -citizenService : CitizenService
    +pingFull(Long, UserDetails) : ResponseEntity<PingREST>
    +pingUrgent(Long, UserDetails) : ResponseEntity<PingREST>
    +pingEmpty(Long, UserDetails) : ResponseEntity<PingREST>
    +listFavorites() : ResponseEntity<List<FavoriteREST>>
    +addFavorite(Long, UserDetails) : ResponseEntity<FavoriteREST>
    +deleteFavorite(Long, UserDetails) : ResponseEntity<Boolean>
}
class EmployeeController {
    -personService : PersonService
    -employeeService : EmployeeService
    +getRoute(UserDetails) : ResponseEntity<List<ContainerREST>>
    +emptyContainer(Long, UserDetails) : ResponseEntity<EmptyingREST>
    +reportLegitimatePing(Long) : ResponseEntity<Boolean>
    +reportFakePing(Long) : ResponseEntity<Boolean>
}

Controller <|- AdminController
CitizenController -|> Controller
Controller <|-- PublicController
Controller <|-- EmployeeController

@enduml